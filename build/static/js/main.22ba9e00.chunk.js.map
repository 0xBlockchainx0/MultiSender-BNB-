{"version":3,"sources":["components/Navbar/scrollSpy.js","generateElement.js","firebase-config.js","components/Navbar/ModalSection.js","components/Navbar/NavbarPage.js","components/Navbar/connectWallet.js","pages/Index3/section.js","components/common/section-title.js","components/Features/features.js","components/Footer/footer-links.js","components/Footer/footer.js","pages/Index3/Index3.js","components/Services/services.js","pages/Metamask.js","components/Navbar/NavbarPageForTron.js","components/Navbar/ModalSectionForTron.js","pages/Index3/sectionForTron.js","components/Features/popUp.js","components/Features/featureForTron.js","pages/Index3/Index4.js","App.js","pages/Tron.js","serviceWorker.js","index.js"],"names":["ScrollspyNav","props","scrollTargetIds","activeNavClass","scrollDuration","Number","headerBackground","router","homeDefaultLink","hashIdentifier","current_time","start","change","duration","to","currentTime","animateScroll","val","easeInOutQuad","window","scrollTo","setTimeout","sectionID","document","querySelector","this","navHref","includes","replace","addEventListener","event","preventDefault","pageYOffset","location","hash","querySelectorAll","forEach","navLink","getNavToSectionID","getAttribute","scrollTargetPosition","getElementById","offsetTop","scrollHeight","scrollSectionOffsetTop","map","index","getNavLinkElement","classList","add","parentNode","clearOtherNavLinkActiveStyle","remove","innerHeight","body","length","excludeSectionID","data-nav","className","children","Component","generateElement","msg","errorNode","createElement","innerHTML","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ref","ModalExample","toggle","setState","modal","state","toggleNested","nestedModal","closeAll","toggleAll","registerVIP","a","walletConnected","swal","content","icon","Contract","methods","isVIP","account","call","send","from","value","updatingDataBase","child","set","isVip","paid","registerVIPWithPayzus","console","log","Web3","web3","givenProvider","PayzusContract","eth","payzusABI","transfer","result","amount","address","Button","color","onClick","style","marginRight","Modal","isOpen","top","fontFamily","ModalBody","onClosed","undefined","ModalHeader","ModalFooter","Navbar_Page","isOpenMenu","navItems","id","idnm","navheading","str","substring","TargetId","item","Fragment","header","Navbar","expand","fixed","navClass","Container","NavbarBrand","href","class","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","multiSender","truncate","type","handleConnectWallet","stickyOffset","Section","Row","Col","lg","size","offset","paddingTop","SectionTitle","marginTop","title","Features","useState","etherAddresses","setEtherAddresses","etherBalances","setEtherBalances","totalEtherAmount","setTotalEtherAmount","totalShreeAmount","setTotalShreeAmount","ERC20Address","setERC20Address","tokenAddresses","setTokenAddresses","tokenBalances","setTokenBalances","decimal","setDecimal","initialized","setInitilized","ShowEtherAddresses","setShowEtherAddresses","ShowTokenAddresses","setShowTokenAddresses","setLoading","initial","setInitial","transWait","setTransWait","uploadCsvForEther","files","reader","FileReader","onload","e","count","lines","split","element","temp","push","toString","parseFloat","readAsText","initialize","getAccounts","tokenContract","ERC20Abi","approve","on","confNumber","receipt","latestBlockHash","error","sendEther","mutiSendBSCWithDifferentValue","sendToken","mutiSendCoinWithDifferentValue","name","readOnly","placeholder","rows","fileTypes","multipleFiles","handleFiles","order","xs","required","errorMessage","validate","onChange","target","pop","FooterLinks","socials","link","social","Footer","Index3","componentDidMount","NavbarPage","connectTronWallet","tronLoggedIn","Metamask","ethereum","Error","enable","accounts","MultiSender","MultiSenderContract","loaded","vipAddress","paddingLeft","trxAddresses","setTrxAddresses","trxBalances","setTrxBalances","totalTrxAmount","setTotalTrxAmount","showTrxAddresses","setShowTrxAddresses","TRC20Address","setTRC20Address","showTokenAddresses","uploadCsvForTrx","Initilaized","multisender","tronWeb","contract","at","callValue","then","Swal","fire","description","Amount","MutiSend_TRX_With_With_DifferentValue","text","footer","showConfirmButton","showCloseButton","Tron","history","createBrowserHistory","App","exact","path","render","Boolean","hostname","match","app","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.22ba9e00.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ScrollspyNav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.props = props;\r\n        this.scrollTargetIds = this.props.scrollTargetIds;\r\n        this.activeNavClass = this.props.activeNavClass;\r\n        this.scrollDuration = Number(this.props.scrollDuration) || 1000;\r\n        this.headerBackground = this.props.headerBackground === \"true\" ? true : false;\r\n\r\n        if (this.props.router && this.props.router === \"HashRouter\") {\r\n            this.homeDefaultLink = \"#/\";\r\n            this.hashIdentifier = \"#/#\";\r\n        } else {\r\n            this.homeDefaultLink = \"/\";\r\n            this.hashIdentifier = \"#\";\r\n        }\r\n    }\r\n\r\n    easeInOutQuad(current_time, start, change, duration) {\r\n        current_time /= duration / 2;\r\n        if (current_time < 1) return change / 2 * current_time * current_time + start;\r\n        current_time--;\r\n        return -change / 2 * (current_time * (current_time - 2) - 1) + start;\r\n    };\r\n\r\n    scrollTo(start, to, duration) {\r\n        let change = to - start,\r\n            currentTime = 0,\r\n            increment = 10;\r\n\r\n        let animateScroll = () => {\r\n            currentTime += increment;\r\n            let val = this.easeInOutQuad(currentTime, start, change, duration);\r\n            window.scrollTo(0, val);\r\n            if (currentTime < duration) {\r\n                setTimeout(animateScroll, increment);\r\n            }\r\n        };\r\n\r\n        animateScroll();\r\n    }\r\n\r\n    getNavLinkElement(sectionID) {\r\n        return document.querySelector(`a[href='${this.hashIdentifier}${sectionID}']`);\r\n    }\r\n\r\n    getNavToSectionID(navHref) {\r\n        return navHref.includes(this.hashIdentifier) ? navHref.replace(this.hashIdentifier, \"\") : \"\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (document.querySelector(`a[href='${this.homeDefaultLink}']`)) {\r\n            document.querySelector(`a[href='${this.homeDefaultLink}']`).addEventListener(\"click\", (event) => {\r\n                event.preventDefault();\r\n                this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\r\n                window.location.hash = \"\";\r\n            });\r\n        }\r\n\r\n        document.querySelector(\"div[data-nav='list']\").querySelectorAll(\"a\").forEach((navLink) => {\r\n            navLink.addEventListener(\"click\", (event) => {\r\n                event.preventDefault();\r\n                let sectionID = this.getNavToSectionID(navLink.getAttribute(\"href\"));\r\n\r\n                if (sectionID) {\r\n                    let scrollTargetPosition = document.getElementById(sectionID).offsetTop - (this.headerBackground ? document.querySelector(\"div[data-nav='list']\").scrollHeight : 0);\r\n                    this.scrollTo(window.pageYOffset, scrollTargetPosition, this.scrollDuration);\r\n                } else {\r\n                    this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\r\n                }\r\n            });\r\n        })\r\n\r\n        window.addEventListener(\"scroll\", () => {\r\n            let scrollSectionOffsetTop;\r\n             this.scrollTargetIds.map((sectionID, index) => {\r\n                scrollSectionOffsetTop = document.getElementById(sectionID).offsetTop - (this.headerBackground ? document.querySelector(\"div[data-nav='list']\").scrollHeight : 0);\r\n\r\n                if (window.pageYOffset >= scrollSectionOffsetTop && window.pageYOffset < scrollSectionOffsetTop + document.getElementById(sectionID).scrollHeight) {\r\n                    this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\r\n                    this.getNavLinkElement(sectionID).parentNode.classList.add(this.activeNavClass);\r\n                    this.clearOtherNavLinkActiveStyle(sectionID)\r\n                } else {\r\n                    this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\r\n                    this.getNavLinkElement(sectionID).parentNode.classList.remove(this.activeNavClass);\r\n                }\r\n\r\n                if (window.innerHeight + window.pageYOffset >= document.body.scrollHeight && index === this.scrollTargetIds.length - 1) {\r\n                    this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\r\n                    this.getNavLinkElement(sectionID).parentNode.classList.add(this.activeNavClass);\r\n                    this.clearOtherNavLinkActiveStyle(sectionID);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    clearOtherNavLinkActiveStyle(excludeSectionID) {\r\n        this.scrollTargetIds.map((sectionID, index) => {\r\n            if (sectionID !== excludeSectionID) {\r\n                this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\r\n                this.getNavLinkElement(sectionID).parentNode.classList.remove(this.activeNavClass);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div data-nav=\"list\" className={this.props.className}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScrollspyNav;","export default function generateElement(msg){\r\n    let errorNode = document.createElement(\"div\");\r\n    errorNode.innerHTML = `${msg}`;\r\n    return errorNode;\r\n  }","import firebase from \"firebase\"\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBWiEJqY3QRrzUYdio-lPU8t4G3Uryq43I\",\r\n    authDomain: \"payzus-c1ad4.firebaseapp.com\",\r\n    databaseURL: \"https://payzus-c1ad4.firebaseio.com\",\r\n    projectId: \"payzus-c1ad4\",\r\n    storageBucket: \"payzus-c1ad4.appspot.com\",\r\n    messagingSenderId: \"352551127736\",\r\n    appId: \"1:352551127736:web:39193f99420cd9787e424d\",\r\n    measurementId: \"G-9KTNZJNTM6\"\r\n  };\r\n  // Initialize Firebase\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebaseApp;","import React, { useState, Component } from 'react';\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport swal from \"sweetalert\";\r\nimport generateElement from \"../../generateElement\";\r\nimport web3 from \"web3\";\r\nimport payzusABI from \"../../contracts/PayzusABI.json\";\r\nimport firebaseApp from \"../../firebase-config\";\r\n\r\nconst database = firebaseApp.database().ref(\"MultiSender\");\r\n\r\nclass ModalExample extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          modal:false,\r\n          nestedModal:false,\r\n          closeAll:false,\r\n          amount:\"\",\r\n          address:\"\"\r\n      }\r\n  }\r\n\r\n    toggle = () => this.setState({modal: !this.state.modal});\r\n\r\n    toggleNested = () => {\r\n        this.setState({nestedModal: !this.state.nestedModal, closeAll:false})\r\n    } \r\n\r\n    toggleAll = () => {\r\n        this.setState({nestedModal: !this.state.nestedModal, closeAll:true})\r\n    }\r\n\r\n\r\n    registerVIP = async () => {\r\n\r\n        if(!this.props.walletConnected){\r\n            swal({\r\n                content: generateElement(`Connect to wallet first`),\r\n                icon: \"error\",\r\n            })\r\n            return \r\n        }\r\n\r\n        else {\r\n            var isVip = await this.props.Contract.methods.isVIP(this.props.account).call();\r\n\r\n            if(isVip){\r\n                swal({\r\n                    content: generateElement(`This Account is already a VIP`),\r\n                    icon: \"error\",\r\n                })\r\n                return\r\n            }\r\n\r\n            else{\r\n                const result = await this.props.Contract.methods.registerVIP().send({from:this.props.account, value:\"1000000000000000000\"});\r\n                \r\n                swal({\r\n                    content: generateElement(`Congratulation you are a VIP now`),\r\n                    icon: \"success\",\r\n                })\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    updatingDataBase = async () => {\r\n        await database\r\n            .child(this.props.account)\r\n            .set({isVip:false, paid:true})\r\n    }\r\n\r\n    registerVIPWithPayzus = async () => {\r\n\r\n        if(!this.props.walletConnected){\r\n            swal({\r\n                content: generateElement(`Connect to wallet first`),\r\n                icon: \"error\",\r\n            })\r\n            return \r\n        }\r\n\r\n        else{\r\n\r\n            var isVip = await this.props.Contract.methods.isVIP(this.props.account).call();\r\n            console.log(isVip);\r\n\r\n            if(isVip){\r\n                swal({\r\n                    content: generateElement(`This Account is already a VIP`),\r\n                    icon: \"error\",\r\n                })\r\n                return\r\n            }\r\n\r\n            else{\r\n                const Web3 = new web3(web3.givenProvider);\r\n                console.log(Web3)\r\n                const PayzusContract = new Web3.eth.Contract(payzusABI,\"0x1F28ECA92cE85d9BC2AEa738Db63bfDd0A6F6fAa\");\r\n                console.log(PayzusContract);\r\n\r\n                const result = await PayzusContract.methods.transfer(\"0xad7b72b4F775C24fD31a921490248A4Ea382E7fA\",\"500000000000000000000\").send({from:this.props.account});\r\n                console.log(result)\r\n                swal({\r\n                    content: generateElement(`Your application is submitted successfuly.Please wait for a while`),\r\n                    icon: \"info\",\r\n                })\r\n                this.updatingDataBase();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !this.props.walletConnected \r\n                ? (\r\n                    <Button color=\"danger\" onClick={this.toggle} style={{marginRight:\"10px\"}}>INFO</Button>\r\n                )\r\n                :\r\n                (\r\n                    <Button color=\"danger\" onClick={this.toggle}>INFO</Button>\r\n                )\r\n            }\r\n          \r\n          <Modal isOpen={this.state.modal} toggle={this.toggle} style={{top:\"20%\"}} >\r\n            {/* <ModalHeader toggle={this.toggle}>Wanna be A VIP</ModalHeader> */}\r\n            <center><p className=\"mt-4\" style={{fontFamily:\"Times New Roman\", color:\"red\"}} ><h3>INFO</h3></p></center>\r\n            <ModalBody>\r\n            <h4 style={{fontFamily:\"Times New Roman\", color:\"gray\"}} className=\"mt-2\">Step 1 : Enter the token contract address . </h4>\r\n            <h4 style={{fontFamily:\"Times New Roman\",color:\"gray\"}} className=\"mt-2\">Step 2 : Initialize the token contract by clicking Initialize Button , then wait for txn to be successful .</h4>\r\n            <h4 style={{fontFamily:\"Times New Roman\",color:\"gray\"}} className=\"mt-2\">Step 3 : Load the file which should be in CSV format .</h4>\r\n            <h4 style={{fontFamily:\"Times New Roman\",color:\"gray\"}} className=\"mt-2\"> Step 4 : Click on Send button to initiate transfer of tokens to multiple addresses</h4>\r\n\r\n            \r\n\r\n            \r\n                \r\n                {/* <h3>Get lifetime free access with Special offer available with only SHREE .</h3>\r\n                <h5>Simply choose how you want to pay, with BNB or SHREE</h5> */}\r\n                \r\n                {/* <AvForm name=\"contact-form\" id=\"contact-form\">\r\n                    <Row>\r\n                        <Col lg=\"12\">\r\n                            <AvField type=\"text\" className=\"form-group mt-2\" name=\"amount\" id=\"amount\" placeholder=\"Enter Amount\" \r\n                                value={this.state.amount}\r\n                                onChange = {(event) => this.setState({amount: event.target.value})}\r\n                            />\r\n                        </Col>  \r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg=\"12\">\r\n                            <AvField type=\"text\" className=\"form-group mt-2\" name=\"amount\" id=\"amount\" placeholder=\"Enter Address\" \r\n                                value={this.state.address}\r\n                                onChange = {(event) => this.setState({address: event.target.value})}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                                            \r\n                </AvForm>             */}\r\n              <br />\r\n              {/* <Button color=\"primary\" onClick={this.toggleNested}>Why VIP ?</Button>\r\n              <Button color=\"primary\" onClick={this.registerVIPWithPayzus} style={{float:\"right\",marginLeft:\"10px\"}}>With SHREE</Button>\r\n              <Button color=\"primary\" onClick={this.registerVIP} style={{float:\"right\"}}>With BNB</Button> */}\r\n              <Button color=\"primary btn-danger\" onClick={this.toggle}>Exit</Button>\r\n              \r\n\r\n              <Modal isOpen={this.state.nestedModal} toggle={this.toggleNested} onClosed={this.state.closeAll ? this.toggle : undefined} style={{top:\"10%\"}}>\r\n\r\n                <ModalHeader>What is a VIP ??</ModalHeader>\r\n                <ModalBody>\r\n                    <h4>VIP give you the acces to Enjoy multisender for lifetime without any Extra transaction fee on our Platform.</h4>\r\n                    <h5>You can be a VIP by paying 1 BNB or 500 SHREE</h5>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                  <Button color=\"primary\" onClick={this.toggleNested}>Cool</Button>{' '}\r\n                  <Button color=\"secondary\" onClick={this.toggleAll}>Exit</Button>\r\n                </ModalFooter>\r\n              </Modal>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              {/* <Button color=\"primary\" onClick={this.toggle}>Do Something</Button>{' '} */}\r\n              {/* <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button> */}\r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      );\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default ModalExample;","import React, { Component } from 'react';\r\nimport { \r\n    Navbar,\r\n    Nav,\r\n    NavbarBrand,\r\n    NavbarToggler,\r\n    NavItem,\r\n    NavLink,\r\n    Container,\r\n    Collapse,\r\n    Button\r\n} from \"reactstrap\";\r\nimport ScrollspyNav from \"./scrollSpy\";\r\n\r\n//Import Stickey Header\r\nimport StickyHeader from 'react-sticky-header';\r\nimport '../../../node_modules/react-sticky-header/styles.css';\r\nimport Modal from \"./ModalSection\";\r\nimport ConnectWallet from \"./connectWallet\";\r\n\r\nclass Navbar_Page extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            navItems : [\r\n                { id: 1 , idnm : \"home\", navheading: \"Home\" },\r\n                { id: 2 , idnm : \"features\", navheading: \"MultiSendBNB\" },\r\n                { id: 3 , idnm : \"features\", navheading: \"MultiSendBEP20\" },\r\n                ],\r\n            isOpenMenu :false\r\n        };\r\n\r\n      \r\n    }\r\n\r\n\r\n    toggle = () => {\r\n        this.setState({ isOpenMenu: !this.state.isOpenMenu });\r\n    }\r\n\r\n    truncate(str) {\r\n        return str.length > 10  ? str.substring(0,6) + \"...\" + str.substring(38,42): str;\r\n    }\r\n    \r\n    render() {\r\n        //Store all Navigationbar Id into TargetID variable(Used for Scrollspy)\r\n        let TargetId = this.state.navItems.map((item) => {\r\n            return(\r\n                item.idnm\r\n            )\r\n        });\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <StickyHeader\r\n                    \r\n                    header = {\r\n                        <Navbar expand=\"lg\" fixed=\"top\" className={ this.props.navClass + \" navbar-custom sticky sticky-dark\"}>\r\n                            <Container>\r\n                                <NavbarBrand className=\"logo\" href=\"/\">\r\n                                    <i class=\"mdi mdi-alien\"></i>Shree\r\n                                </NavbarBrand>\r\n        \r\n                                <NavbarToggler className=\"p-0\" onClick={this.toggle} ><i className=\"mdi mdi-menu\"></i></NavbarToggler>\r\n        \r\n                                <Collapse id=\"navbarCollapse\" isOpen={this.state.isOpenMenu} navbar>\r\n                                    <ScrollspyNav\r\n                                        scrollTargetIds={TargetId}\r\n                                        activeNavClass=\"active\"\r\n                                        scrollDuration=\"800\"\r\n                                        headerBackground=\"true\"\r\n                                    >\r\n                                        <Nav className=\"navbar-nav navbar-center\" id=\"mySidenav\">\r\n                                            {this.state.navItems.map((item) => (\r\n                                                <NavItem className={item.navheading === \"Home\" ? \"active\" : \"\" }>\r\n                                                    <NavLink href={\"#\" + item.idnm} > {item.navheading}</NavLink>\r\n                                                </NavItem>\r\n                                            ))} \r\n                                        </Nav>\r\n                                        </ScrollspyNav>\r\n                                        \r\n                                        <div className=\"nav-button ml-auto\">\r\n                                            <Nav className=\"navbar-right\" navbar>\r\n                                                <NavItem>\r\n                                                    <Modal  Contract = {this.props.multiSender} account = {this.props.account} walletConnected={this.props.walletConnected} />\r\n                                                </NavItem>\r\n\r\n                                                <NavItem className={\"active\"}>\r\n                                                    \r\n                                                    {\r\n                                                        this.props.walletConnected\r\n                                                        ? (<NavLink>{this.truncate(this.props.account)}\r\n                                                            \r\n                                                            </NavLink>)\r\n                                                        : (<p></p>)\r\n                                                    }\r\n                                                    \r\n                                                </NavItem>\r\n                                                <NavItem>\r\n                                                    \r\n                                                      {this.props.walletConnected\r\n                                                        ? <Button type=\"button\" className=\"btn-custom navbar-btn btn-rounded waves-effect waves-light\" onClick={this.props.handleConnectWallet}>Change Wallet</Button>\r\n\r\n                                                        : <Button type=\"button\" className=\"btn-custom navbar-btn btn-rounded waves-effect waves-light\" onClick={this.props.handleConnectWallet}>Connect Wallet</Button>\r\n                                                      }                                                 \r\n                                                    \r\n                                                </NavItem>\r\n                                                \r\n                                            </Nav>\r\n                                        </div>\r\n                                    \r\n                                </Collapse>\r\n                            </Container>\r\n                        </Navbar>\r\n                    }\r\n                    stickyOffset = {-100}\r\n                >\r\n                </StickyHeader>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar_Page;","import React, { useState, Component } from 'react';\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport swal from \"sweetalert\";\r\nimport generateElement from \"../../generateElement\";\r\nimport web3 from \"web3\";\r\nimport payzusABI from \"../../contracts/PayzusABI.json\";\r\nimport firebaseApp from \"../../firebase-config\";\r\n\r\nconst database = firebaseApp.database().ref(\"MultiSender\");\r\n\r\nclass ConnectWallet extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          modal:false,\r\n          nestedModal:false,\r\n          closeAll:false,\r\n          \r\n      }\r\n  }\r\n\r\n    toggle = () => this.setState({modal: !this.state.modal});\r\n\r\n    toggleNested = () => {\r\n        this.setState({nestedModal: !this.state.nestedModal, closeAll:false})\r\n    } \r\n\r\n    toggleAll = () => {\r\n        this.setState({nestedModal: !this.state.nestedModal, closeAll:true})\r\n    }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n           \r\n            <Button color=\"danger\" onClick={this.toggle} style={{marginLeft:\"10px\"}}>Connect Wallet</Button>\r\n               \r\n          \r\n          <Modal isOpen={this.state.modal} toggle={this.toggle} style={{top:\"20%\"}}>\r\n            <ModalHeader toggle={this.toggle}>Select Your Wallet</ModalHeader>\r\n            <ModalBody>                \r\n              \r\n              <br />\r\n              <Button color=\"primary\" onClick={this.toggleNested}>Why VIP ?</Button>\r\n              <Button color=\"primary\" style={{float:\"right\",marginLeft:\"10px\"}}\r\n                onClick = { () => {\r\n                    this.props.hello()\r\n                }}\r\n                >\r\n                    MetaMask\r\n                </Button>\r\n              <Button color=\"primary\" onClick={this.props.connectTronWallet} style={{float:\"right\"}}>TronLink</Button>\r\n\r\n              \r\n\r\n              <Modal isOpen={this.state.nestedModal} toggle={this.toggleNested} onClosed={this.state.closeAll ? this.toggle : undefined} style={{top:\"10%\"}}>\r\n\r\n                <ModalHeader>What is a VIP ??</ModalHeader>\r\n                <ModalBody>\r\n                    <h4>VIP give you the acces to Enjoy multisender for lifetime without any Extra transaction fee on our Platform.</h4>\r\n                    <h5>You can be a VIP by paying 1 ETH or 500 PZS</h5>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                  <Button color=\"primary\" onClick={this.toggleNested}>Cool</Button>{' '}\r\n                  <Button color=\"secondary\" onClick={this.toggleAll}>Exit</Button>\r\n                </ModalFooter>\r\n              </Modal>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              {/* <Button color=\"primary\" onClick={this.toggle}>Do Something</Button>{' '} */}\r\n              {/* <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button> */}\r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      );\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default ConnectWallet;","import React, { Component } from 'react';\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nclass Section extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <section className=\"section bg-home height-80vh\" id=\"home\">\r\n                    <div className=\"bg-overlay\"></div>\r\n                    <div className=\"display-table\">\r\n                        <div className=\"display-table-cell\">\r\n                            <Container >\r\n                                <Row >\r\n                                    <Col lg={{size : 8, offset : 2}} className=\"text-white text-center\">\r\n                                        <div>\r\n                                           <div>\r\n                                                <h4 className=\"home-small-title\" style={{paddingTop:\"60px\"}}>MultiSender</h4>\r\n                                                <h1 className=\"home-title\">We Support All Networks</h1>\r\n                                                <p className=\"padding-t-15 home-desc mx-auto\">\r\n                                                    <span>Binance TestNet </span>\r\n                                                    <span>| Binance MainNet</span>\r\n                                                    \r\n                                                </p>\r\n                                                <p className=\"play-shadow margin-t-30 margin-l-r-auto\">\r\n                                                </p> \r\n                                           </div>\r\n                                        </div>\r\n                                          \r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Section;","import React, { Component } from 'react';\r\nimport { Row, Col } from \"reactstrap\";\r\n\r\nclass SectionTitle extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                        <Row style={{marginTop:-30}}>\r\n                            <Col lg={{size : 8, offset : 2}}>\r\n                                <h1 className=\"section-title text-center\">{this.props.title}</h1>\r\n                                {/* <div className=\"section-title-border margin-t-20\"></div> */}\r\n                                {/* <p className=\"section-subtitle text-muted text-center padding-t-30 font-secondary\" style={{marginTop:-25, marginBottom:30}}>{this.props.description}</p> */}\r\n                            </Col>\r\n                        </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionTitle;","import React, { Component, useState } from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\nimport ReactFileReader from \"react-file-reader\";\r\nimport web3 from \"web3\";\r\nimport ERC20Abi from \"../../contracts/ERC20ABI.json\";\r\nimport swal from \"sweetalert\";\r\nimport generateElement from \"../../generateElement\";\r\n\r\nimport SectionTitle from \"../common/section-title\";\r\n\r\nexport default function Features(props) {\r\n  const [etherAddresses, setEtherAddresses] = useState([]);\r\n  const [etherBalances, setEtherBalances] = useState([]);\r\n  const [totalEtherAmount, setTotalEtherAmount] = useState(\"\");\r\n  const [totalShreeAmount, setTotalShreeAmount] = useState(\"\");\r\n\r\n  const [ERC20Address, setERC20Address] = useState(\"\");\r\n  const [tokenAddresses, setTokenAddresses] = useState([]);\r\n  const [tokenBalances, setTokenBalances] = useState([]);\r\n  const [decimal, setDecimal] = useState(18);\r\n  const [initialized, setInitilized] = useState(false);\r\n\r\n  const [ShowEtherAddresses, setShowEtherAddresses] = useState([]);\r\n  const [ShowTokenAddresses, setShowTokenAddresses] = useState([]);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [initial, setInitial] = useState(false);\r\n  const [transWait, setTransWait] = useState(false);\r\n  const [transSuccess, setTransSuccess] = useState(false);\r\n\r\n\r\n  const uploadCsvForEther = async (files) => {\r\n    var reader = new FileReader();\r\n\r\n    reader.onload = function (e) {\r\n      setShowEtherAddresses(reader.result);\r\n      var count = 0;\r\n      let lines = reader.result.split(\"\\n\");\r\n      console.log(lines);\r\n      lines.forEach((element) => {\r\n        if (element !== \"\") {\r\n          var temp = element.split(\",\");\r\n          etherAddresses.push(temp[0]);\r\n          etherBalances.push((temp[1] * 1000000000000000000).toString());\r\n        }\r\n      });\r\n\r\n      console.log(count);\r\n\r\n      // etherAddresses.forEach(function(item) {\r\n      //     if(item === \"\"){\r\n      //         etherAddresses.pop(item)\r\n      //     }\r\n      // })\r\n\r\n      // etherBalances.forEach(function(item) {\r\n      //     if(isNaN(item)){\r\n      //         etherBalances.pop(item)\r\n      //     }\r\n      // })\r\n\r\n      etherBalances.forEach(function (item) {\r\n        count = count + parseFloat(item / 1);\r\n        console.log(item);\r\n      });\r\n\r\n      setTotalEtherAmount(count);\r\n      console.log(count);\r\n      console.log(etherAddresses);\r\n      console.log(etherBalances);\r\n      setEtherAddresses(etherAddresses);\r\n      setEtherBalances(etherBalances);\r\n    };\r\n    reader.readAsText(files[0]);\r\n  };\r\n\r\n  const uploadCsvForToken = (files) => {\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      setShowTokenAddresses(reader.result);\r\n      let lines = reader.result.split(\"\\n\");\r\n\r\n      lines.forEach((element) => {\r\n        var temp = element.split(\",\");\r\n        tokenAddresses.push(temp[0]);\r\n        tokenBalances.push((temp[1] * 1000000000000000000).toString());\r\n      });\r\n      var count = 0;\r\n      // tokenAddresses.pop(0,-1)\r\n      // tokenBalances.pop(0,-1)\r\n\r\n      tokenAddresses.forEach(function (item) {\r\n        if (item === \"\") {\r\n          tokenAddresses.pop(item);\r\n        }\r\n      });\r\n      tokenBalances.forEach(function (item) {\r\n        if (item === \"NaN\") {\r\n          tokenBalances.pop(item);\r\n        }\r\n      });\r\n\r\n      tokenBalances.forEach(function (item) {\r\n        count = count + parseFloat(item / 1);\r\n        console.log(count)\r\n      });\r\n\r\n      \r\n      setTotalShreeAmount(count);\r\n      console.log(tokenAddresses);\r\n      console.log(tokenBalances);\r\n      console.log(count);\r\n      setTokenAddresses(tokenAddresses);\r\n      setTokenBalances(tokenBalances);\r\n    };\r\n    reader.readAsText(files[0]);\r\n  };\r\n\r\n  const initialize = async () => {\r\n    setInitial(true);\r\n    if (props.multiSender === undefined) {\r\n        setInitial(false)\r\n      swal({\r\n        content: generateElement(`Connect to wallet first`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    } else if (ERC20Address === \"\") {\r\n        setInitial(false)\r\n      swal({\r\n        content: generateElement(`Please Enter Token Address first`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    } else if (initialized === true) {\r\n        setInitial(false)\r\n      swal({\r\n        content: generateElement(`This Token is already initilized`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const Web3 = new web3(web3.givenProvider);\r\n    const accounts = await Web3.eth.getAccounts();\r\n    // console.log(accounts)\r\n\r\n    const tokenContract = new Web3.eth.Contract(ERC20Abi, ERC20Address);\r\n\r\n    console.log(tokenContract);\r\n\r\n    // const decimal = await tokenContract.methods.decimals().call();\r\n\r\n    // setDecimal(decimal);\r\n\r\n    tokenContract.methods\r\n      .approve(\r\n        \"0x5D007190CfD702ebEAd392287eD3CDFa0ff545Bb\",\r\n        \"70000000000000000000000000000000\"\r\n      )\r\n      .send({ from: props.account })\r\n      .on(\"confirmation\", function (confNumber, receipt, latestBlockHash) {\r\n        setInitial(false);\r\n      }).on(\"error\", function (error) {\r\n        setInitial(false);\r\n      });\r\n\r\n    setInitilized(true);\r\n    // console.log(result)\r\n  };\r\n\r\n  // const isVIP = async (value) => {\r\n  //     var result = await props.multiSender.methods.isVIP(value).call()\r\n  //     console.log(result)\r\n  //     return result;\r\n  // }\r\n\r\n  const sendEther = async () => {\r\n    setTransWait(true);\r\n    if (props.multiSender === undefined) {\r\n        setTransWait(false)\r\n      swal({\r\n        content: generateElement(`Connect to wallet first`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (totalEtherAmount === \"\") {\r\n        setTransWait(false)\r\n      swal({\r\n        content: generateElement(`Upload CSV first`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (etherAddresses.length > 150) {\r\n        setTransWait(false)\r\n      swal({\r\n        content: generateElement(`Please upload upto 150 Addresses only`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // var isVip = await props.multiSender.methods.isVIP(props.account).call();\r\n    // console.log(isVip);\r\n\r\n    // if (isVip) {\r\n    //   var Amount = totalEtherAmount;\r\n    // } else {\r\n    //   var Amount = totalEtherAmount + 0.0001;\r\n    // }\r\n\r\n    // console.log(Amount);\r\n    props.multiSender.methods\r\n      .mutiSendBSCWithDifferentValue(etherAddresses, etherBalances)\r\n      .send({ from: props.account, value: totalEtherAmount })\r\n      .on(\"confirmation\", function (confNumber, receipt, latestBlockHash) {\r\n        setTransWait(false);\r\n        setTotalEtherAmount(\"\");\r\n    setEtherAddresses([]);\r\n    setEtherBalances([]);\r\n    setShowEtherAddresses([]);\r\n      })\r\n      .on(\"error\", function (error) {\r\n        setTransWait(false);\r\n        setTotalEtherAmount(\"\");\r\n    setEtherAddresses([]);\r\n    setEtherBalances([]);\r\n    setShowEtherAddresses([]);\r\n      });\r\n\r\n    // console.log(result)\r\n\r\n    \r\n  };\r\n\r\n  const sendToken = async () => {\r\n    setLoading(true);\r\n    setTransWait(true);\r\n    var isVip = await props.multiSender.methods.isVIP(props.account).call();\r\n    console.log(isVip);\r\n\r\n    // if (isVip) {\r\n    //   var Amount = (0).toString();\r\n    // } else {\r\n    //   var Amount = (0.0001).toString();\r\n    // }\r\n\r\n    if (props.multiSender === undefined) {\r\n        setTransWait(false)\r\n      swal({\r\n        content: generateElement(`Connect to wallet first`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    } else if (ERC20Address === \"\") {\r\n        setTransWait(false)\r\n      swal({\r\n        content: generateElement(`Please Enter Token Address first`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    } else if (tokenAddresses === []) {\r\n        setTransWait(false)\r\n      swal({\r\n        content: generateElement(`Upload CSV file first`),\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // console.log(ERC20Address)\r\n\r\n    props.multiSender.methods\r\n      .mutiSendCoinWithDifferentValue(\r\n        ERC20Address,\r\n        tokenAddresses,\r\n        tokenBalances\r\n      )\r\n      .send({ from: props.account })\r\n      .on(\"confirmation\", function (confNumber, receipt, latestBlockHash) {\r\n        setTransWait(false);\r\n        setTotalShreeAmount(\"\");\r\n    setERC20Address(\"\");\r\n    setTokenAddresses([]);\r\n    setTokenBalances([]);\r\n    setShowTokenAddresses([]);\r\n      }).on(\"error\", function (error) {\r\n        setTransWait(false);\r\n        setTotalShreeAmount(\"\");\r\n    setERC20Address(\"\");\r\n    setTokenAddresses([]);\r\n    setTokenBalances([]);\r\n    setShowTokenAddresses([]);\r\n      });\r\n\r\n    setLoading(false);\r\n\r\n    // console.log(result)\r\n    \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"section\" id=\"features\">\r\n        {/* <div style={{textAlign:\"center\"}}><h2>USE MULTISENDER</h2></div> */}\r\n        <Container>\r\n          <SectionTitle />\r\n\r\n          <Row className=\"align-items-center\">\r\n            <Col lg=\"5\" className=\"order-2 order-lg-1\">\r\n              <div>\r\n                <h2>Transfer BNB</h2>\r\n              </div>\r\n              <div className=\"features-box mt-5 mt-lg-0\">\r\n                <div className=\"custom-form mt-4 pt-4\">\r\n                  <div id=\"message\"></div>\r\n                  <AvForm name=\"contact-form\" id=\"contact-form\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <AvField\r\n                          readOnly=\"true\"\r\n                          type=\"text\"\r\n                          className=\"form-group mt-2\"\r\n                          name=\"name\"\r\n                          id=\"name\"\r\n                          placeholder=\"Total Amount in BNB*\"\r\n                          // errorMessage=\"\"\r\n                          // validate={{\r\n                          //     required: {value: true, errorMessage: \"This field is mandatory\"},\r\n                          //   }}\r\n                          value={totalEtherAmount}\r\n                          //   onChange={(event) => setTotalEtherAmount(event.target.value)}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"12\">\r\n                        <div className=\"form-group mt-2\">\r\n                          <textarea\r\n                            readOnly=\"true\"\r\n                            name=\"comments\"\r\n                            id=\"comments\"\r\n                            rows=\"4\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"List of Addresses in CSV\"\r\n                            value={ShowEtherAddresses}\r\n                          ></textarea>\r\n                          <p>Upload upto 150 Addresses at a time.</p>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <Row>\r\n                      <Col lg=\"6\" className=\"text-left\">\r\n                        <ReactFileReader\r\n                          fileTypes={[\r\n                            \".csv\",\r\n                            \".xlsx\",\r\n                            \"xlsm\",\r\n                            \".xlsb\",\r\n                            \"xltx\",\r\n                            \".xltm\",\r\n                            \".xls\",\r\n                            \".xlt\",\r\n                            \".xml\",\r\n                            \".xlam\",\r\n                            \".xla\",\r\n                            \"xlw\",\r\n                            \".xlr\",\r\n                          ]}\r\n                          multipleFiles={false}\r\n                          handleFiles={uploadCsvForEther}\r\n                        >\r\n                          <button className=\"submitBnt btn btn-custom\">\r\n                            Upload CSV file{\" \"}\r\n                          </button>\r\n                          <div id=\"simple-msg\"></div>\r\n                        </ReactFileReader>\r\n                      </Col>\r\n                      <Col lg=\"6\" className=\"text-right\">\r\n                        <button\r\n                          className=\"submitBnt btn btn-custom\"\r\n                          onClick={sendEther}\r\n                        >\r\n                          Send <i className=\"mdi mdi-arrow-right\"></i>\r\n                        </button>\r\n                        <div id=\"simple-msg\"></div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Modal isOpen={initial} style={{ top: \"20%\" }}>\r\n              <ModalBody>\r\n                <h4>Please wait till your initialization completes</h4>\r\n              </ModalBody>\r\n            </Modal>\r\n            <Modal isOpen={transWait} style={{ top: \"20%\" }}>\r\n              <ModalBody>\r\n                <h4>Please wait till your transaction is mined</h4>\r\n              </ModalBody>\r\n            </Modal>\r\n            <Col lg={{ size: 1, order: 3 }} xs={{ order: 2 }}></Col>\r\n\r\n            <Col\r\n              lg={{ size: 6, order: 3 }}\r\n              xs={{ order: 3 }}\r\n              className=\"order-2 order-lg-1\"\r\n            >\r\n              <div>\r\n                <h2>Transfer BEP20 Token</h2>\r\n              </div>\r\n              <div className=\"features-box mt-2 mt-lg-0\">\r\n                <div className=\"custom-form mt-2 pt-2\">\r\n                  <AvForm>\r\n                    <Row>\r\n                      <Col lg=\"8\">\r\n                        <AvField\r\n                          type=\"text\"\r\n                          className=\"form-group mt-2\"\r\n                          name=\"name\"\r\n                          id=\"name\"\r\n                          placeholder=\"Token Contract Address*\"\r\n                          required\r\n                          errorMessage=\"\"\r\n                          validate={{\r\n                            required: {\r\n                              value: true,\r\n                              errorMessage: \"This field is mandatory\",\r\n                            },\r\n                          }}\r\n                          value={ERC20Address}\r\n                          onChange={(event) =>\r\n                            setERC20Address(event.target.value)\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <AvField\r\n                          type=\"text\"\r\n                          className=\"form-group mt-2\"\r\n                          name=\"name\"\r\n                          id=\"name\"\r\n                          placeholder=\"Decimal*\"\r\n                          required\r\n                          errorMessage=\"\"\r\n                          validate={{\r\n                            required: {\r\n                              value: true,\r\n                              errorMessage: \"This field is mandatory\",\r\n                            },\r\n                          }}\r\n                          value={decimal}\r\n                          onChange={(event) => setDecimal(event.target.value)}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                    <Col lg=\"12\">\r\n                    <AvField\r\n                          readOnly=\"true\"\r\n                          type=\"text\"\r\n                          className=\"form-group mt-2\"\r\n                          name=\"name\"\r\n                          id=\"name\"\r\n                          placeholder=\"Total Amount in SHREE*\"\r\n                          value={totalShreeAmount}\r\n                        />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"12\">\r\n                        <div className=\"form-group mt-2\">\r\n                          <textarea\r\n                            readOnly=\"true\"\r\n                            name=\"comments\"\r\n                            id=\"comments\"\r\n                            rows=\"4\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"List of Addresses in CSV\"\r\n                            value={ShowTokenAddresses}\r\n                          ></textarea>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <p>Upload upto 150 Addresses at a time.</p>\r\n\r\n                    <Row>\r\n                      <Col lg=\"4\" className=\"text-left\">\r\n                        <button\r\n                          className=\"submitBnt btn btn-custom\"\r\n                          onClick={initialize}\r\n                        >\r\n                          Initialize\r\n                        </button>\r\n                        <div id=\"simple-msg\"></div>\r\n                      </Col>\r\n                      <Col lg=\"4\" className=\"text-center\">\r\n                        <ReactFileReader\r\n                          fileTypes={[\r\n                            \".csv\",\r\n                            \".xlsx\",\r\n                            \"xlsm\",\r\n                            \".xlsb\",\r\n                            \"xltx\",\r\n                            \".xltm\",\r\n                            \".xls\",\r\n                            \".xlt\",\r\n                            \".xml\",\r\n                            \".xlam\",\r\n                            \".xla\",\r\n                            \"xlw\",\r\n                            \".xlr\",\r\n                          ]}\r\n                          multipleFiles={false}\r\n                          handleFiles={uploadCsvForToken}\r\n                        >\r\n                          <button className=\"submitBnt btn btn-custom\">\r\n                            Upload CSV file{\" \"}\r\n                          </button>\r\n                          <div id=\"simple-msg\"></div>\r\n                        </ReactFileReader>\r\n                      </Col>\r\n                      <Col lg=\"4\" className=\"text-right\">\r\n                        <button\r\n                          className=\"submitBnt btn btn-custom\"\r\n                          onClick={sendToken}\r\n                        >\r\n                          Send <i className=\"mdi mdi-arrow-right\"></i>\r\n                        </button>\r\n                        <div id=\"simple-msg\"></div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n  // }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nclass FooterLinks extends Component {\r\n    state = {\r\n        socials : [\r\n            { icon : \"mdi mdi-facebook\", link : \"#\" },\r\n            { icon : \"mdi mdi-twitter\", link : \"#\" },\r\n            { icon : \"mdi mdi-linkedin\", link : \"#\" },\r\n            // { icon : \"mdi mdi-google-plus\", link : \"#\" },\r\n            // { icon : \"mdi mdi-dribbble\", link : \"#\" },\r\n        ]\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"footer-alt\" >\r\n                    <Container>\r\n                        <Row>\r\n                            <Col lg=\"12\">\r\n                                <div className=\"float-left pull-none\">\r\n                                    <p className=\"copy-rights text-muted mb-3 mb-sm-0\">2020 - 2021 © SHREE</p>\r\n                                </div>\r\n                                <div className=\"float-right pull-none \">\r\n                                    <ul className=\"list-inline social m-0\">\r\n                                        {\r\n                                            this.state.socials.map((social) =>\r\n                                                <li className=\"list-inline-item\"><Link to={social.link} class=\"social-icon\"><i class={social.icon}></i></Link></li>\r\n                                            )\r\n                                        }\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"clearfix\"></div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FooterLinks;","import React, { Component } from 'react';\r\n\r\n//Import Footer link\r\nimport FooterLinks from \"./footer-links\";\r\n\r\nclass Footer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <FooterLinks/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport NavbarPage from \"../../components/Navbar/NavbarPage\";\r\nimport Section from \"./section\";\r\nimport Features from '../../components/Features/features';\r\nimport Footer from '../../components/Footer/footer';\r\nimport Services from \"../../components/Services/services\";\r\n\r\n\r\nclass Index3 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          navClass : \"\",\r\n        };\r\n    }\r\n        componentDidMount = async() =>\r\n    {\r\n        document.getElementById(\"colorTheme\").href=\"assets/colors/blue.css\";\r\n        console.log(this.props.account)\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {/* Importing Navbar */}\r\n                <NavbarPage \r\n                    navClass = {this.state.navClass} \r\n                    account = {this.props.account} \r\n                    walletConnected = {this.props.walletConnected}\r\n                    handleConnectWallet = {this.props.handleConnectWallet}\r\n                    multiSender = {this.props.multiSender}\r\n                    connectTronWallet = {this.props.connectTronWallet}\r\n                    tronLoggedIn = {this.props.tronLoggedIn}\r\n                    \r\n                    />\r\n\r\n                {/* Importing Section */}\r\n                <Section/>\r\n\r\n                {/* Importing Features */}\r\n                <Features multiSender = {this.props.multiSender} account={this.props.account} web3={this.props.web3}/>\r\n\r\n                {/* Importing Get Footer */}\r\n\r\n                {/* <Services \r\n                    address = {this.props.address}\r\n                /> */}\r\n\r\n                <Footer/>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index3;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Row,Col } from \"reactstrap\";\r\n\r\n//Import Section Title\r\nimport SectionTitle from \"../common/section-title\";\r\n\r\nclass Services extends Component {\r\n   \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <SectionTitle title=\"MultiSend Tron\" description=\"Description Here\"/>\r\n                <section className=\"section bg-light\" id=\"services\" style={{marginTop:20}}>\r\n                <div className=\"bg-overlay\"></div>\r\n                    <Container>\r\n                        <Row>\r\n            \r\n                            <Col lg={{size :8, offset:2}} className=\"text-center\">\r\n                                <h1>{this.props.address}</h1>\r\n                                <h1 className=\"get-started-title text-white\">Send Trx</h1>\r\n                                <div className=\"section-title-border margin-t-20 bg-white\"></div>\r\n                                <p className=\"section-subtitle font-secondary text-white text-center padding-t-30\">Send Trx and TRC20 Tokens to multiple accounts </p>\r\n                                <Link to=\"#\" className=\"btn btn-bg-white waves-effect margin-t-20\">Comming Soon </Link>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Services;","import React, { Component } from 'react';\r\nimport Index3 from \"./Index3/Index3\";\r\nimport MultiSenderContract from \"../contracts/MultiSender.json\";\r\nimport Web3 from \"web3\"\r\n\r\nexport default class Metamask extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            web3: null,\r\n            accounts: null, \r\n            MultiSender: null, \r\n            loaded:false, \r\n            walletConnected: false,\r\n        }\r\n    }\r\n\r\n    handleConnectWallet = async () => {\r\n      \r\n        const {ethereum } = window;\r\n   \r\n        if(!ethereum){\r\n          throw new Error(\"Web3 not found\");\r\n        }\r\n   \r\n        const web3 = new Web3(ethereum);\r\n        await ethereum.enable();\r\n        console.log(web3);\r\n   \r\n        \r\n   \r\n       const accounts = await web3.eth.getAccounts();\r\n   \r\n       const MultiSender = new web3.eth.Contract(MultiSenderContract,\"0x5D007190CfD702ebEAd392287eD3CDFa0ff545Bb\")\r\n       console.log(MultiSender)\r\n   \r\n         this.setState({web3,accounts, MultiSender, loaded:true, walletConnected:true, vipAddress:true });\r\n   \r\n       }\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n       \r\n         return(\r\n           <Index3 \r\n             walletConnected={this.state.walletConnected} \r\n             handleConnectWallet = {this.handleConnectWallet}\r\n             \r\n           />\r\n         )\r\n       }\r\n         return (\r\n           <React.Fragment>\r\n             <Index3 \r\n               account = {this.state.accounts[0]} \r\n               multiSender = {this.state.MultiSender} \r\n               web3 = {this.state.web3} \r\n               walletConnected = {this.state.walletConnected}\r\n               handleConnectWallet = {this.handleConnectWallet}\r\n              \r\n               \r\n               />\r\n         </React.Fragment>\r\n       );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { \r\n    Navbar,\r\n    Nav,\r\n    NavbarBrand,\r\n    NavbarToggler,\r\n    NavItem,\r\n    NavLink,\r\n    Container,\r\n    Collapse,\r\n    Button\r\n} from \"reactstrap\";\r\nimport ScrollspyNav from \"./scrollSpy\";\r\n\r\n//Import Stickey Header\r\nimport StickyHeader from 'react-sticky-header';\r\nimport '../../../node_modules/react-sticky-header/styles.css';\r\nimport ModalForTron from \"./ModalSectionForTron\";\r\n\r\nclass Navbar_Page extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            navItems : [\r\n                { id: 1 , idnm : \"home\", navheading: \"Home\" },\r\n                { id: 2 , idnm : \"features\", navheading: \"MultiSendTRX\" },\r\n                // { id: 3 , idnm : \"services\", navheading: \"MultiSendTrx\" },\r\n                ],\r\n            isOpenMenu :false\r\n        };\r\n\r\n      \r\n    }\r\n\r\n\r\n    toggle = () => {\r\n        this.setState({ isOpenMenu: !this.state.isOpenMenu });\r\n    }\r\n\r\n    truncate(str) {\r\n        return str.length > 10  ? str.substring(0,6) + \"...\" + str.substring(30,34): str;\r\n    }\r\n    \r\n    render() {\r\n        //Store all Navigationbar Id into TargetID variable(Used for Scrollspy)\r\n        let TargetId = this.state.navItems.map((item) => {\r\n            return(\r\n                item.idnm\r\n            )\r\n        });\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <StickyHeader\r\n                    \r\n                    header = {\r\n                        <Navbar expand=\"lg\" fixed=\"top\" className={ this.props.navClass + \" navbar-custom sticky sticky-dark\"}>\r\n                            <Container>\r\n                                <NavbarBrand className=\"logo\" href=\"/\">\r\n                                    <i class=\"mdi mdi-alien\"></i>Payzus\r\n                                </NavbarBrand>\r\n        \r\n                                <NavbarToggler className=\"p-0\" onClick={this.toggle} ><i className=\"mdi mdi-menu\"></i></NavbarToggler>\r\n        \r\n                                <Collapse id=\"navbarCollapse\" isOpen={this.state.isOpenMenu} navbar>\r\n                                    <ScrollspyNav\r\n                                        scrollTargetIds={TargetId}\r\n                                        activeNavClass=\"active\"\r\n                                        scrollDuration=\"800\"\r\n                                        headerBackground=\"true\"\r\n                                    >\r\n                                        <Nav className=\"navbar-nav navbar-center\" id=\"mySidenav\">\r\n                                            {this.state.navItems.map((item) => (\r\n                                                <NavItem className={item.navheading === \"Home\" ? \"active\" : \"\" }>\r\n                                                    <NavLink href={\"#\" + item.idnm} > {item.navheading}</NavLink>\r\n                                                </NavItem>\r\n                                            ))} \r\n                                        </Nav>\r\n                                        </ScrollspyNav>\r\n                                        {/* <Nav className=\"navbar-left\" navbar>\r\n                                            <NavItem>\r\n                                                <NavLink href={\"/ethereum\"}>MultiSendEther</NavLink>\r\n                                            </NavItem>\r\n                                        </Nav> */}\r\n                                        <div className=\"nav-button ml-auto\">\r\n                                            <Nav className=\"navbar-right\" navbar>\r\n                                                {/* <NavItem>\r\n                                                    <ModalForTron  address={this.props.address} walletConnected={this.props.walletConnected} multisender={this.props.multisender}/>\r\n                                                </NavItem> */}\r\n\r\n                                                <NavItem className={\"active\"}>\r\n                                                    \r\n                                                    {\r\n                                                        this.props.walletConnected\r\n                                                        ? \r\n                                                            (<NavLink>{this.truncate(this.props.address)}</NavLink>)\r\n                                                            \r\n                                                        : (<p></p>)\r\n                                                    }\r\n                                                    \r\n                                                </NavItem>\r\n                                                <NavItem>\r\n                                                    \r\n                                                      {this.props.walletConnected\r\n                                                        ? <Button type=\"button\" className=\"btn-custom navbar-btn btn-rounded waves-effect waves-light\" onClick={this.props.connectTronWallet}>Change Wallet</Button>\r\n\r\n                                                        : <Button type=\"button\" className=\"btn-custom navbar-btn btn-rounded waves-effect waves-light\" onClick={this.props.connectTronWallet}>Connect Wallet</Button>\r\n                                                      }                                                 \r\n                                                    \r\n                                                </NavItem>\r\n                                                \r\n                                            </Nav>\r\n                                        </div>\r\n                                    \r\n                                </Collapse>\r\n                            </Container>\r\n                        </Navbar>\r\n                    }\r\n                    stickyOffset = {-100}\r\n                >\r\n                </StickyHeader>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar_Page;","import React, { useState, Component } from 'react';\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport swal from \"sweetalert\";\r\nimport generateElement from \"../../generateElement\";\r\nimport web3 from \"web3\";\r\nimport payzusABI from \"../../contracts/PayzusABI.json\";\r\nimport firebaseApp from \"../../firebase-config\";\r\n\r\nconst database = firebaseApp.database().ref(\"MultiSender\");\r\n\r\nclass ModalExample extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          modal:false,\r\n          nestedModal:false,\r\n          closeAll:false,\r\n          \r\n      }\r\n  }\r\n\r\n    toggle = () => this.setState({modal: !this.state.modal});\r\n\r\n    toggleNested = () => {\r\n        this.setState({nestedModal: !this.state.nestedModal, closeAll:false})\r\n    } \r\n\r\n    toggleAll = () => {\r\n        this.setState({nestedModal: !this.state.nestedModal, closeAll:true})\r\n    }\r\n\r\n    registerVIP = async() => {\r\n\r\n      if(!this.props.walletConnected){\r\n        swal({\r\n          content: generateElement(`Connect to wallet first`),\r\n          icon: \"error\",\r\n        })\r\n        return\r\n      }\r\n\r\n      else {\r\n        var isVip = await this.props.multisender.isVIP(this.props.address).call()\r\n\r\n        if(isVip){\r\n          swal({\r\n              content: generateElement(`This Account is already a VIP`),\r\n              icon: \"error\",\r\n          })\r\n          return\r\n        }\r\n\r\n        else{\r\n          const result = await this.props.multisender.registerVIP().send({\r\n            shouldPollResponse:true,\r\n            callValue:1000000000\r\n          })\r\n\r\n          swal({\r\n            content: generateElement(`Congratulation you are a VIP now`),\r\n            icon: \"success\",\r\n          })\r\n        }\r\n      \r\n      }\r\n      \r\n    }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !this.props.walletConnected \r\n                ? (\r\n                    <Button onClick={this.toggle} style={{marginRight:\"10px\",backgroundColor:\"#B80F0A\"}}>VIP</Button>\r\n                )\r\n                :\r\n                (\r\n                    <Button color=\"danger\" onClick={this.toggle}>VIP</Button>\r\n                )\r\n            }\r\n          \r\n          <Modal isOpen={this.state.modal} toggle={this.toggle} style={{top:\"20%\"}}>\r\n            <ModalHeader toggle={this.toggle}>Wanna be A VIP</ModalHeader>\r\n            <ModalBody>\r\n                \r\n                <h3>Get lifetime free access with Special offer available with only PZS .</h3>\r\n                <h5>Simply click register and be a VIP</h5>\r\n                \r\n               \r\n              <br />\r\n              <Button color=\"primary\" onClick={this.toggleNested}>Why VIP ?</Button>\r\n              <Button color=\"primary\"  style={{float:\"right\"}} onClick={this.registerVIP}>Register</Button>\r\n\r\n              \r\n\r\n              <Modal isOpen={this.state.nestedModal} toggle={this.toggleNested} onClosed={this.state.closeAll ? this.toggle : undefined} style={{top:\"10%\"}}>\r\n\r\n                <ModalHeader>What is a VIP ??</ModalHeader>\r\n                <ModalBody>\r\n                    <h4>VIP give you the acces to Enjoy multisender for lifetime without any Extra transaction fee on our Platform.</h4>\r\n                    <h5>You can be a VIP by paying 1000 TRX</h5>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                  <Button color=\"primary\" onClick={this.toggleNested}>Cool</Button>{' '}\r\n                  <Button color=\"secondary\" onClick={this.toggleAll}>Exit</Button>\r\n                </ModalFooter>\r\n              </Modal>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              \r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      );\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default ModalExample;","import React, { Component } from 'react';\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nclass Section extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <section className=\"section bg-home height-80vh\" id=\"home\">\r\n                    <div className=\"bg-overlay-tron\"></div>\r\n                    <div className=\"display-table\">\r\n                        <div className=\"display-table-cell\">\r\n                            <Container >\r\n                                <Row >\r\n                                    <Col lg={{size : 8, offset : 2}} className=\"text-white text-center\">\r\n                                        <div>\r\n                                           <div>\r\n                                                <h4 className=\"home-small-title\" style={{paddingTop:\"60px\"}}>MultiSender</h4>\r\n                                                <h1 className=\"home-title\">We Support All Networks</h1>\r\n                                                <p className=\"padding-t-15 home-desc mx-auto\">\r\n                                                    <span>MainNet</span>\r\n                                                    \r\n                                                    <span style={{paddingLeft:10}}>Shasta</span>\r\n                                                    <span style={{paddingLeft:10}}>Tronex</span>\r\n                                                    <span style={{paddingLeft:10}}>Nile</span>\r\n                                                </p>\r\n                                                <p className=\"play-shadow margin-t-30 margin-l-r-auto\">\r\n                                                </p> \r\n                                           </div>\r\n                                        </div>\r\n                                          \r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Section;","import React, { useState, Component } from 'react';\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport swal from \"sweetalert\";\r\nimport generateElement from \"../../generateElement\";\r\n\r\n\r\nclass ModalExample extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          modal:false,\r\n          nestedModal:false,\r\n          closeAll:false,\r\n          \r\n      }\r\n  }\r\n\r\n    toggle = () => this.setState({modal: !this.state.modal});\r\n\r\n    toggleNested = () => {\r\n        this.setState({nestedModal: !this.state.nestedModal, closeAll:false})\r\n    } \r\n\r\n    toggleAll = () => {\r\n        this.setState({nestedModal: !this.state.nestedModal, closeAll:true})\r\n    }\r\n\r\n    \r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n           \r\n           \r\n            <Button color=\"success\" onClick={() => {\r\n                this.setState({modal: !this.state.modal}, () => {\r\n                    this.props.sendTrx();\r\n                })\r\n            }}>Hello</Button>\r\n            \r\n          \r\n          <Modal isOpen={this.state.modal} toggle={this.toggle} style={{top:\"20%\"}}>\r\n            <ModalHeader toggle={this.toggle}>Wanna be A VIP</ModalHeader>\r\n            <ModalBody>\r\n                {\r\n                    this.props.loading ?\r\n                    <h4>Processing.....</h4>\r\n                    :\r\n                    <h4>Hello</h4>\r\n                }\r\n                \r\n                \r\n               \r\n              <br />\r\n              {/* <Button color=\"primary\" onClick={this.toggleNested}>Why VIP ?</Button>\r\n              <Button color=\"primary\"  style={{float:\"right\"}} onClick={this.registerVIP}>Register</Button> */}\r\n\r\n              \r\n\r\n              <Modal isOpen={this.state.nestedModal} toggle={this.toggleNested} onClosed={this.state.closeAll ? this.toggle : undefined} style={{top:\"10%\"}}>\r\n\r\n                <ModalHeader>What is a VIP ??</ModalHeader>\r\n                <ModalBody>\r\n                    <h4>VIP give you the acces to Enjoy multisender for lifetime without any Extra transaction fee on our Platform.</h4>\r\n                    <h5>You can be a VIP by paying 1000 TRX</h5>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                  <Button color=\"primary\" onClick={this.toggleNested}>Cool</Button>{' '}\r\n                  <Button color=\"secondary\" onClick={this.toggleAll}>Exit</Button>\r\n                </ModalFooter>\r\n              </Modal>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              \r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      );\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default ModalExample;","import React, { Component, useState } from 'react';\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport ReactFileReader from \"react-file-reader\";\r\nimport web3 from \"web3\";\r\nimport ERC20Abi from \"../../contracts/ERC20ABI.json\";\r\nimport swal from \"sweetalert\";\r\nimport generateElement from \"../../generateElement\";\r\nimport PopUpModel from \"./popUp\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport SectionTitle from \"../common/section-title\";\r\n\r\nexport default function Features(props) {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [trxAddresses,setTrxAddresses] = useState([]);\r\n    const [trxBalances,setTrxBalances] = useState([]);\r\n    const [totalTrxAmount, setTotalTrxAmount] = useState(\"\");\r\n    const [showTrxAddresses, setShowTrxAddresses] = useState([])\r\n\r\n    const [tokenAddresses,setTokenAddresses] = useState([]);\r\n    const [tokenBalances,setTokenBalances] = useState([]);\r\n    const [TRC20Address,setTRC20Address] = useState(\"\");\r\n    const [showTokenAddresses,setShowTokenAddresses] = useState([]);\r\n\r\n  \r\n\r\n    const uploadCsvForTrx = async (files) => {\r\n\r\n        var reader = new FileReader();\r\n     \r\n        reader.onload = function(e) {\r\n            \r\n            setShowTrxAddresses(reader.result);\r\n            var count = 0;\r\n            let lines = reader.result.split('\\n');\r\n            // console.log(lines)\r\n            lines.forEach(element => {\r\n\r\n                if(element !== \"\"){\r\n                    var temp = element.split(\",\");\r\n                    trxAddresses.push(temp[0]);\r\n                    trxBalances.push((temp[1]*1000000).toString());  \r\n                }\r\n                \r\n            });\r\n\r\n            \r\n            trxBalances.forEach(function(item) {\r\n                count = count + parseFloat(item / (10 ** 6));\r\n            });\r\n\r\n            setTotalTrxAmount(count)\r\n            // console.log(count);\r\n            // console.log(trxAddresses);\r\n            // console.log(trxBalances)\r\n            setTrxAddresses(trxAddresses);\r\n            setTrxBalances(trxBalances);  \r\n        }\r\n        reader.readAsText(files[0]);\r\n       \r\n    }\r\n\r\n    const uploadCsvForToken = (files) => {\r\n\r\n        var reader = new FileReader();\r\n        reader.onload = function(e) {\r\n\r\n            setShowTokenAddresses(reader.result);\r\n            let lines = reader.result.split('\\n');\r\n\r\n            lines.forEach(element => {\r\n\r\n                if(element !== \"\"){\r\n                    var temp = element.split(\",\");\r\n                    tokenAddresses.push(temp[0]);\r\n                    tokenBalances.push((temp[1]*1000000).toString()); \r\n                }\r\n                             \r\n            });\r\n\r\n\r\n            // console.log(tokenAddresses);\r\n            // console.log(tokenBalances)\r\n            setTokenAddresses(tokenAddresses);\r\n            setTokenBalances(tokenBalances);    \r\n        }\r\n        reader.readAsText(files[0]);\r\n\r\n    }\r\n\r\n\r\n    const sendTrx = () => {\r\n\r\n        \r\n\r\n        if(props.multisender === undefined){\r\n            swal({\r\n                content:generateElement(`Connect Wallet First`),\r\n                icon:\"error\"\r\n            })\r\n            return\r\n        }\r\n\r\n        if(totalTrxAmount === \"\"){\r\n            swal({\r\n                content:generateElement(`Upload CSV first`),\r\n                icon:\"error\"\r\n            })\r\n            return\r\n        }\r\n\r\n        \r\n        var Amount;\r\n\r\n        // var isVip = await props.multisender.isVIP(props.address).call()\r\n\r\n        // if(!isVip){\r\n        //     Amount = (totalTrxAmount + 100).toString()\r\n        // }\r\n        // else{\r\n        //     Amount = (totalTrxAmount)\r\n        // }\r\n        \r\n\r\n        Amount = (totalTrxAmount + 100).toString();\r\n\r\n        // console.log(Amount)\r\n\r\n\r\n        props.multisender.MutiSend_TRX_With_With_DifferentValue(trxAddresses,trxBalances).send({\r\n            // shouldPollResponse:true,\r\n            callValue: (Amount * (10 ** 6))\r\n        })\r\n        .then(() => {\r\n            Swal.fire({\r\n                title: 'Track Your Transaction here',\r\n                text:'Click on the link below to track your transaction on tronscan',\r\n                footer:`<a target=\"_blank\" href=\"https://tronscan.org/#/address/${ props.address }/transactions\">Track Transaction</a>`,\r\n                showConfirmButton: false,\r\n                showCloseButton:true,\r\n                \r\n            })\r\n        })\r\n\r\n        // setTimeout(function() {\r\n        //     Swal.fire({\r\n        //         title: 'Track Your Transaction here',\r\n        //         text:'Click on the link below to track your transaction on tronscan',\r\n        //         footer:`<a target=\"_blank\" href=\"https://shasta.tronscan.org/#/address/${ props.address }/transactions\">Track Transaction</a>`,\r\n        //         showCloseButton: false\r\n        //     })\r\n        // },1);\r\n\r\n        setShowTrxAddresses([]);\r\n        setTrxAddresses([]);\r\n        setTrxBalances([]);\r\n        setTotalTrxAmount(\"\")\r\n\r\n        \r\n    }\r\n\r\n    const Initilaized = async () => {\r\n\r\n        if(props.multisender === undefined){\r\n            swal({\r\n                content:generateElement(`Connect Wallet First`),\r\n                icon:\"error\"\r\n            })\r\n            return\r\n        }\r\n\r\n        if(TRC20Address === \"\"){\r\n            swal({\r\n                content:generateElement(`Enter Token Contract address first`),\r\n                icon:\"error\"\r\n            })\r\n            return\r\n        }\r\n\r\n        const tokenContract = await window.tronWeb.contract().at(TRC20Address);\r\n\r\n        tokenContract.approve(\"TQTj8YcTGLidbFz2oZ2K8EZMd7LuxD3Qrc\",\"1000000000000\").send({\r\n            // shouldPollResponse:true,\r\n            callValue:0\r\n        })\r\n        .then(() => {\r\n            Swal.fire({\r\n                title:'Initilized',\r\n                icon:\"success\"\r\n            })\r\n        })\r\n\r\n        setTRC20Address(\"\");\r\n\r\n    }\r\n\r\n    const sendTRC20 = () => {\r\n\r\n        if(props.multisender === undefined){\r\n            swal({\r\n                content:generateElement(`Connect Wallet First`),\r\n                icon:\"error\"\r\n            })\r\n            return\r\n        }\r\n\r\n        var Amount;\r\n\r\n        Amount = (100).toString();\r\n\r\n        // var isVip = await props.multisender.isVIP(props.address).call()\r\n\r\n        // if(!isVip){\r\n        //     Amount = (100).toString()\r\n        // }\r\n        // else{\r\n        //     Amount = (0).toString()\r\n        // }\r\n\r\n\r\n        if(TRC20Address === \"\"){\r\n            swal({\r\n                content:generateElement(`Enter Token Contract Address first`),\r\n                icon:\"error\"\r\n            })\r\n            return\r\n        }\r\n\r\n        if(tokenAddresses.length === 0){\r\n            swal({\r\n                content:generateElement(`Upload CSV firts`),\r\n                icon:\"error\"\r\n            })\r\n            return\r\n        }\r\n\r\n\r\n        props.multisender.mutiSendCoinWithDifferentValue(TRC20Address,tokenAddresses,tokenBalances).send({\r\n            // shouldPollResponse:true,\r\n            callValue:(Amount * (10 ** 6))\r\n        })\r\n        .then(() => {\r\n            Swal.fire({\r\n                title: 'Track Your Transaction here',\r\n                text:'Click on the link below to track your transaction on tronscan',\r\n                footer:`<a target=\"_blank\" href=\"https://tronscan.org/#/address/${ props.address }/transactions\">Track Transaction</a>`,\r\n                showConfirmButton: false,\r\n                showCloseButton:true,\r\n                \r\n            })\r\n        })\r\n\r\n        setTRC20Address(\"\");\r\n        setShowTokenAddresses([]);\r\n        setTokenAddresses([]);\r\n        setTokenBalances([]);\r\n        \r\n    }\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <section className=\"section\" id=\"features\">\r\n                \r\n                    <Container>  \r\n\r\n                    <SectionTitle title=\"MultiSend Tron\" description=\"Description Here.\"/>\r\n                    \r\n                        <Row className=\"align-items-center\">\r\n                            <Col lg=\"5\" className=\"order-2 order-lg-1\">\r\n                                <div ><h2>Transfer TRX</h2></div>\r\n                                <div className=\"features-box mt-5 mt-lg-0\">\r\n                                <div className=\"custom-form mt-4 pt-4\">\r\n                                    <div id=\"message\"></div>\r\n                                    <AvForm name=\"contact-form\" id=\"contact-form\">\r\n                                        <Row>\r\n                                            <Col lg=\"6\">\r\n                                                <AvField readOnly=\"true\" type=\"text\" className=\"form-group mt-2\" name=\"name\" id=\"name\" placeholder=\"Total Amount in TRX*\" \r\n                                                   value={totalTrxAmount}\r\n                                                />\r\n                                               \r\n                                            </Col>  \r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col lg=\"12\">\r\n                                                <div className=\"form-group mt-2\">\r\n                                                    <textarea readOnly=\"true\" name=\"comments\" id=\"comments\"  rows=\"4\" className=\"form-control\" placeholder=\"List of Addresses in CSV\"\r\n                                                        value={showTrxAddresses}\r\n                                                    >\r\n\r\n                                                    </textarea>\r\n                                                    {/* <p>Upload upto 150 Addresses at a time.</p> */}\r\n                                                </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col lg=\"6\" className=\"text-left\">\r\n                                                <ReactFileReader fileTypes={[\".csv\",\".xlsx\",\"xlsm\",\".xlsb\",\"xltx\",\".xltm\",\".xls\",\".xlt\",\".xml\",\".xlam\",\".xla\",\"xlw\",\".xlr\"]} multipleFiles={false} handleFiles={uploadCsvForTrx}>\r\n                                                    <button  className=\"submitBnt btn btn-custom\">Upload CSV file </button>\r\n                                                    <div id=\"simple-msg\"></div>\r\n                                                </ReactFileReader>\r\n                                                \r\n                                            </Col>\r\n                                            <Col lg=\"6\" className=\"text-right\">\r\n                                                <button  className=\"submitBnt btn btn-custom\" onClick={sendTrx}>Send <i className=\"mdi mdi-arrow-right\"></i></button>\r\n                                                <div id=\"simple-msg\"></div>\r\n                                            </Col>\r\n                                            \r\n                                            {/* <PopUpModel sendTrx = {sendTrx} loading={loading}/> */}\r\n                                            \r\n                                        </Row>\r\n                                        \r\n                                    </AvForm>\r\n                                    \r\n\r\n                                    \r\n                                </div>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col lg={{size: 1, order: 3}} xs={{order:2}}></Col>\r\n\r\n                            <Col lg={{size: 6, order: 3, }} xs={{order : 3}} className=\"order-2 order-lg-1\">\r\n                                <div ><h2>Transfer TRC20</h2></div>\r\n                                <div className=\"features-box mt-5 mt-lg-0\">\r\n                                    <div className=\"custom-form mt-4 pt-4\">\r\n                                    <AvForm>\r\n                                            <Row>\r\n                                                <Col lg=\"8\">\r\n                                                    <AvField type=\"text\" className=\"form-group mt-2\" name=\"name\" id=\"name\" placeholder=\"Token Contract Address*\" \r\n                                                        \r\n                                                        value={TRC20Address}\r\n                                                        onChange = {(event) => setTRC20Address(event.target.value)}\r\n                                                    />\r\n                                                </Col>\r\n                                                {/* <Col lg=\"4\">\r\n                                                    <AvField type=\"text\" className=\"form-group mt-2\" name=\"name\" id=\"name\" placeholder=\"Decimal*\" required\r\n                                                        \r\n                                                        \r\n                                                        \r\n                                                    />\r\n                                                </Col> */}\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col lg=\"12\">\r\n                                                    <div className=\"form-group mt-2\">\r\n                                                        <textarea readOnly=\"true\" name=\"comments\" id=\"comments\"  rows=\"4\" className=\"form-control\" placeholder=\"List of Addresses in CSV\"\r\n                                                           value={showTokenAddresses}\r\n                                                        >\r\n\r\n                                                        </textarea>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col lg=\"4\" className=\"text-left\">\r\n                                                    <button  className=\"submitBnt btn btn-custom\" onClick={Initilaized}>Initialize</button>\r\n                                                    <div id=\"simple-msg\"></div>    \r\n                                                </Col>\r\n                                                <Col lg=\"4\" className=\"text-center\">\r\n                                                    <ReactFileReader fileTypes={[\".csv\",\".xlsx\",\"xlsm\",\".xlsb\",\"xltx\",\".xltm\",\".xls\",\".xlt\",\".xml\",\".xlam\",\".xla\",\"xlw\",\".xlr\"]} multipleFiles={false} handleFiles={uploadCsvForToken}>\r\n                                                        <button  className=\"submitBnt btn btn-custom\">Upload CSV file </button>\r\n                                                        <div id=\"simple-msg\"></div>\r\n                                                    </ReactFileReader>                                                  \r\n                                                </Col>\r\n                                                <Col lg=\"4\" className=\"text-right\">\r\n                                                    <button  className=\"submitBnt btn btn-custom\" onClick={sendTRC20}>Send <i className=\"mdi mdi-arrow-right\"></i></button>\r\n                                                    <div id=\"simple-msg\"></div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </AvForm>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    // }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport NavbarPage from \"../../components/Navbar/NavbarPageForTron\";\r\nimport Section from \"./sectionForTron\";\r\nimport Features from '../../components/Features/featureForTron';\r\nimport Footer from '../../components/Footer/footer';\r\nimport Services from \"../../components/Services/services\";\r\n\r\n\r\nclass Tron extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          navClass : \"\",\r\n        };\r\n    }\r\n        componentDidMount = async() =>\r\n    {\r\n        document.getElementById(\"colorTheme\").href=\"assets/colors/blue.css\";\r\n        // console.log(this.props.account)\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {/* Importing Navbar */}\r\n                <NavbarPage \r\n                    navClass = {this.state.navClass} \r\n                    connectTronWallet = {this.props.connectTronWallet}\r\n                    walletConnected = {this.props.walletConnected}\r\n                    address = {this.props.address}\r\n                    multisender = {this.props.MultiSenderContract}\r\n                    />\r\n\r\n                {/* Importing Section */}\r\n                <Section/>\r\n\r\n                {/* Importing Features */}\r\n                <Features multisender = {this.props.MultiSenderContract} address={this.props.address}/>\r\n\r\n                {/* Importing Get Footer */}\r\n\r\n               \r\n\r\n                <Footer/>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tron;","import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n  \r\n} from 'react-router-dom';\r\n\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport MetaMask from \"./pages/Metamask\";\r\nimport Tron from \"./pages/Tron\";\r\n\r\nconst history = createBrowserHistory();\r\nclass App extends Component {\r\n\r\n    render() {\r\n      return(\r\n        <Switch history={history}>\r\n          <Route exact path=\"/\" render={props => (<MetaMask {...props} />)}/> \r\n          {/* <Route exact path=\"/\" render={props => (<Tron {...props} />)}/> */}\r\n        </Switch>\r\n      )     \r\n    }\r\n}\r\n  \r\n  export default App;","import React, { Component } from 'react';\r\nimport TronWeb from \"tronweb\";\r\nimport Index4 from \"./Index3/Index4\";\r\nimport swal from \"sweetalert\";\r\nimport generateElement from \"../generateElement\";\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\r\n\r\nexport default class Tron extends Component {\r\n\r\n    \r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n\r\n      tronAddress:\"\",\r\n      tronBalance:0,\r\n      tronInstance:null,\r\n      loaded:false,\r\n      walletConnected:false,\r\n      MultiSenderContract:null,\r\n\r\n      tronWeb: {\r\n        installed: false,\r\n        loggedIn: false\r\n      },\r\n    };\r\n  }\r\n\r\n\r\n  \r\n  connectTronWallet = async () => {\r\n\r\n    await new Promise(resolve => {\r\n      const tronWebState = {\r\n          installed: !!window.tronWeb,\r\n          loggedIn: window.tronWeb && window.tronWeb.ready\r\n      };\r\n\r\n      if(tronWebState.installed) {\r\n          this.setState({\r\n              tronWeb:\r\n              tronWebState\r\n          });\r\n\r\n          return resolve();\r\n      }\r\n\r\n      let tries = 0;\r\n\r\n      const timer = setInterval(() => {\r\n          if(tries >= 10) {\r\n              const TRONGRID_API = 'https://api.trongrid.io';\r\n\r\n              window.tronWeb = new TronWeb(\r\n                  TRONGRID_API,\r\n                  TRONGRID_API,\r\n                  TRONGRID_API\r\n              );\r\n\r\n              this.setState({\r\n                  tronWeb: {\r\n                      installed: false,\r\n                      loggedIn: false\r\n                  }\r\n              });\r\n\r\n              clearInterval(timer);\r\n              return resolve();\r\n          }\r\n\r\n          tronWebState.installed = !!window.tronWeb;\r\n          tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n\r\n          if(!tronWebState.installed)\r\n              return tries++;\r\n\r\n          this.setState({\r\n              tronWeb: tronWebState\r\n          });\r\n\r\n          resolve();\r\n      }, 100);\r\n  });\r\n\r\n  if(!this.state.tronWeb.installed){\r\n    Swal.fire({\r\n        title: 'TronLink not installed',\r\n        text:'Click on the link below to install',\r\n        footer:`<a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/tronlink%EF%BC%88%E6%B3%A2%E5%AE%9D%E9%92%B1%E5%8C%85%EF%BC%89/ibnejdfjmmkpcnlpebklmnkoeoihofec\">Install TronLink</a>`,\r\n        showConfirmButton: false,\r\n        showCloseButton:true,\r\n        \r\n    })\r\n    return;\r\n  }\r\n\r\n  if(!this.state.tronWeb.loggedIn) {\r\n    \r\n\r\n    window.tronWeb.defaultAddress = {\r\n      hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\r\n      base58: FOUNDATION_ADDRESS\r\n    };\r\n\r\n      window.tronWeb.on('addressChanged', () => {\r\n          if(this.state.tronWeb.loggedIn)\r\n              return;\r\n\r\n          this.setState({\r\n              tronWeb: {\r\n                  installed: true,\r\n                  loggedIn: true\r\n              }\r\n          });\r\n      });\r\n\r\n      swal({\r\n        content:generateElement(`TronLink is locked, Please Unlock it First`),\r\n        icon:\"error\"\r\n    })\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n  this.setState({tronInstance:window.tronWeb}, () => {\r\n    // console.log(this.state.tronInstance)\r\n  })\r\n\r\n\r\n  \r\n  const temp_account = this.state.tronInstance.address.fromHex((((await this.state.tronInstance.trx.getAccount()).__payload__).address).toString())\r\n\r\n  const account = this.state.tronInstance.defaultAddress.base58;\r\n\r\n//   const vikas = this.state.tronInstance.address.toHex(\"TRAZR47Go2RBnLT5hpotBtcGmpfpyaA6WF\");\r\n//   console.log(\"vikas address\",vikas)\r\n\r\n  const temp_balance = (await this.state.tronInstance.trx.getBalance(account))/(10 ** 6);\r\n\r\n  const temp_Contract = await this.state.tronInstance.contract().at(\"TQTj8YcTGLidbFz2oZ2K8EZMd7LuxD3Qrc\");\r\n \r\n  \r\n  this.setState({tronAddress:account, tronBalance:temp_balance, loaded:true, walletConnected:true, MultiSenderContract:temp_Contract})\r\n\r\n//   console.log(this.state.tronAddress, this.state.tronBalance)\r\n//   console.log(this.state.MultiSenderContract)\r\n\r\n  \r\n  \r\n  }\r\n\r\n    render() {\r\n        if(!this.state.loaded){\r\n            return(\r\n                <Index4 \r\n                    walletConnected = {this.state.walletConnected}\r\n                    connectTronWallet = {this.connectTronWallet}\r\n                />\r\n            )\r\n        }\r\n\r\n        return(\r\n            <Index4 \r\n                walletConnected = {this.state.walletConnected}\r\n                connectTronWallet = {this.connectTronWallet}\r\n                address = {this.state.tronAddress}\r\n                MultiSenderContract = {this.state.MultiSenderContract}\r\n            />\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nconst app = (\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\nserviceWorker.unregister();"],"sourceRoot":""}